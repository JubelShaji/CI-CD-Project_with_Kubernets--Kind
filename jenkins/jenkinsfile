pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = 'jubelshaji'
        IMAGE_TAG = "${BUILD_NUMBER}"
        REMOTE_HOST = "k8s@172.31.21.115"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main',
                    url: 'https://github.com/JubelShaji/CI-CD-Project_with_Kubernets--Kind.git'
            }
        }

        stage('Install Dependencies & Test Backend') {
            steps {
                dir('backend') {
                    sh 'npm install'
                    sh 'npm test'
                }
            }
        }

        stage('Install Dependencies & Test Frontend') {
            steps {
                dir('frontend') {
                    sh 'npm install'
                    sh 'npm test -- --coverage --watchAll=false'
                }
            }
        }

        stage('Build & Push Docker Images') {
            parallel {
                stage('Backend Image') {
                    steps {
                        script {
                            dir('backend') {
                                def backendImage = docker.build("${DOCKER_REGISTRY}/jenkin-kind:backend-${IMAGE_TAG}")
                                docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
                                    backendImage.push()
                                    backendImage.push('backend-latest')
                                }
                            }
                        }
                    }
                }
                stage('Frontend Image') {
                    steps {
                        script {
                            dir('frontend') {
                                def frontendImage = docker.build("${DOCKER_REGISTRY}/jenkin-kind:frontend-${IMAGE_TAG}")
                                docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
                                    frontendImage.push()
                                    frontendImage.push('frontend-latest')
                                }
                            }
                        }
                    }
                }
            }
        }
        stage('Update and Copy') {
            steps {
                sshagent (credentials: ['ssh-credential']) {
                     sh """
                        sed -i 's|jubelshaji/jenkin-kind:backend-latest|${DOCKER_REGISTRY}/jenkin-kind:backend-${IMAGE_TAG}|g' kind/backend-deployment.yaml
                        sed -i 's|jubelshaji/jenkin-kind:frontend-latest|${DOCKER_REGISTRY}/jenkin-kind:frontend-${IMAGE_TAG}|g' kind/frontend-deployment.yaml

                        scp -o StrictHostKeyChecking=no kind/backend-deployment.yaml ${REMOTE_HOST}:mernapp/backend-deployment.yaml
                        scp -o StrictHostKeyChecking=no kind/frontend-deployment.yaml ${REMOTE_HOST}:mernapp/frontend-deployment.yaml
                     """
                }
            }
        }
        stage('Deployment') {
            steps {
                sshagent (credentials: ['ssh-credential']) {
                     sh """
                        ssh -o StrictHostKeyChecking=no ${REMOTE_HOST} 'sudo kubectl apply -f mernapp/'
                     """
                }
            }
        }
    }

    post {
        success { echo 'üéâ Pipeline completed successfully!' }
        failure { echo '‚ùå Pipeline failed!' }
        always { sh 'docker system prune -f' }
    }
}
